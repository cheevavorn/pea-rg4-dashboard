import { compose } from 'redux';
import { connect } from 'react-redux';
import { firestoreConnect, isEmpty, isLoaded } from 'react-redux-firebase';
import { Redirect } from 'react-router-dom';

import { Layout, Space, Typography, Steps, Row, Col, Button, message, Avatar, Card, Divider, List } from 'antd';
import { GoogleOutlined, CaretRightOutlined } from '@ant-design/icons';

import moment from 'moment';
import 'moment/locale/th';

const { Header, Footer, Content } = Layout;

// locale config
const localeConfigObj = {
    'J':'‡∏Å‡∏ü‡∏ï.1',
    'K':'‡∏Å‡∏ü‡∏ï.2',
    'L':'‡∏Å‡∏ü‡∏ï.3',
    'Z':'‡∏†‡∏≤‡∏Ñ 4 (‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°)',
};

const Request = (props) => {
    const { userData, firebase, firestore } = props; 
    
    if (!isLoaded(props.userData)) {
        return <h3>Loading user data...</h3>;
    }

    if (!isLoaded(props.requestors)) {
        return <h3>Loading requestors data...</h3>;
    }

    if (!isLoaded(props.pathConfig)) {
        return <h3>Loading config data...</h3>;
    }

    if (isEmpty(props.requestors)) {
        return <h3>Empty requestors...</h3>;
    }

    if(isEmpty(props.userData)){
        return <Redirect to="/login" />
    }

    const requestorData = { ...props.requestors[userData.Username] };

    const loginWithGoogle = async () => {
        try {
            let authResult = await firebase.login({ provider: 'google', type: 'popup' })
            const { profile: { avatarUrl, displayName, email } } = authResult;
            await firestore.update({
                collection: 'requestors',
                doc: userData.Username
            }, {
                ...requestorData,
                isGmailAuth: true,
                gmailName: displayName,
                gmailAccount: email,
                gmailAvatarPath: avatarUrl,
                gmailAuthAt: new Date(),
                completedStep: 2
            });
            message.success('ü•≥ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Gmail ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ');
        } catch (error) {
            console.log('loginWithGoogle -> catch -> ', error);
        }
    }

    const renderReactNodeByGmailAuthCriteria = () => {
        if (!isLoaded(requestorData)) {
            return <h3>Loading...</h3>;
        }

        if (isEmpty(props.requestors)) {
            return <h3>Empty requestors...</h3>;
        }

        const gmailAuthAtObj = moment.unix(requestorData.gmailAuthAt.seconds)
        if(!requestorData.isGmailAuth){
            return (
                <>
                    <Button onClick={loginWithGoogle} danger>
                        <GoogleOutlined/> ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô Gmail
                    </Button>
                </>
            )
        }

        return (
            <Card>
                <Space direction="vertical">
                    <Typography.Text level={3} strong>üéâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Gmail ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</Typography.Text>
                    <Typography.Text strong>
                        <Avatar src={requestorData.gmailAvatarPath} /> {requestorData.gmailName}
                    </Typography.Text>
                    <Typography.Text strong>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Gmail: {requestorData.gmailAccount}</Typography.Text>
                    <Typography.Text type="secondary">
                        ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {gmailAuthAtObj.locale('th').format('D MMMM YYYY, HH:mm:ss ‡∏ô.')}
                        ({gmailAuthAtObj.locale('th').fromNow()})
                    </Typography.Text>
                </Space>
            </Card>
        );
    }

    const createListOfDataStudioPath = () => {
        const pathConfig = props.pathConfig;
        const grantAffiliation = requestorData['grantAffiliation'];
        return grantAffiliation
                    .filter(affiliation => affiliation.isGranted)
                    .map(grantedAffiliation => (
                        <>
                            <List.Item.Meta
                                title={<Typography.Text strong><CaretRightOutlined /> {localeConfigObj[grantedAffiliation.district]}</Typography.Text>}
                            />
                            <Button type="primary" href={pathConfig[grantedAffiliation.district].dataStudioPath} target="_blank" >‡∏•‡∏¥‡∏á‡∏Å‡πå</Button>
                        </>                        
                    ));
                    
    }

    const renderReactNodeByPermissionApprove = () => {
        if(!requestorData.isGmailAuth && !requestorData.isApprovedPermission){
            return (
                <Card bordered>
                    <Typography.Text strong>
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Gmail ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2
                    </Typography.Text>
                </Card>
            )
        }

        if(!requestorData.isApprovedPermission && requestorData.isGmailAuth) {
            return (
                <Card bordered>
                    <Typography.Text strong>
                        üèóÔ∏è ‡∏Å‡∏ß‡∏®.(‡∏†4) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå, ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö üôÇ
                    </Typography.Text>
                </Card>
            )
        }
        if(requestorData.isApprovedPermission && requestorData.isGmailAuth) {
            return (
                <Card>
                    <Typography.Text strong>
                        üéâ ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                    </Typography.Text>
                    <Divider dashed={true} style={{marginTop:5,marginBottom:10}} />
                    <Typography.Paragraph>
                        ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå {`${requestorData.gmailAccount}`} ‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
                    </Typography.Paragraph>
                    <List
                        size="default"
                        dataSource={createListOfDataStudioPath()}
                        bordered
                        renderItem={item=>(
                            <List.Item>
                                {item}
                            </List.Item>
                        )}
                    >
                        
                    </List>
                </Card>
            );
        }
    }

    return (
        <>
            <Layout>
                <Header>
                    <Space direction="vertical">
                        <Typography.Title level={5} style={{ color:'white' }}>
                            ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                        </Typography.Title>
                    </Space>
                </Header>
                <Content>
                    <Row justify={`center`} style={{marginTop: 30}}>
                        <Col span={18}>
                            <Steps direction="vertical" current={requestorData.completedStep}>    
                                <Steps.Step 
                                    title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô IDM" 
                                    description="‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö IDM ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" />
                                <Steps.Step 
                                    title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Gmail" 
                                    description={renderReactNodeByGmailAuthCriteria()} />

                                <Steps.Step 
                                    title="‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ø" 
                                    description={renderReactNodeByPermissionApprove()} />
                            </Steps>
                        </Col>
                    </Row>
                </Content>
                <Footer>
                    <Space>
                        <Typography.Text strong>
                            ‡πÇ‡∏î‡∏¢ ‡∏ú‡∏ö‡∏ó.‡∏Å‡∏ß‡∏®.(‡∏†4), ‡πÇ‡∏ó‡∏£. 5140
                        </Typography.Text>
                    </Space>
                </Footer>
            </Layout>
        </>
    );
}

const enhance = compose(
    firestoreConnect(['requestors','pathConfig']),
    connect((state) => {
        return {
            userData: state.userData,
            requestors: state.firestore.data.requestors,
            pathConfig: state.firestore.data.pathConfig
        }
    }),
);

export default enhance(Request);